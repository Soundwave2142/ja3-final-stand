print("Final Stand: Common file loaded")

--- ====================================================================================================
--- TODO
--- ====================================================================================================

---- Game Started
--V-- New Game -> Final Stand
------ Choose Options for Game:
------ Waves (3-7 waves) - FIX UI and test game remembering choice
------ Enemy Faction (random, legion, army, ...) - CHANGE to be defined through editor
------ Sector - (random, ...x4-5)
------- GAME STARTED:
------- Choose Mercs - CHANGE starting money
------- Schedule Enemy Assault Squad - CHANCE to be generated by proper class from editor definitions
------- (?) Enforce Mercs wearing themed gear (maybe option)
-------- ON BATTLE WIN:
-------- Schedule Next Attack
-------- Let player rearm from store
-------- Let player do Sector operations (differs per map)
--------- ON LAST BATTLE FIN
--------- Play Good Finale
-------- ON BATTLE LOOSE:
-------- Schedule Bad Ending

-- TODO:
--- Finish Factions set up: Rebels, Army, Super Soldiers | Legion, Army, Super Soldiers
--- General Balancing.
--- Money per wave, bobby restock

-- TODO: FIX MENU ORDER
-- TODO: FIX STYLING
-- TODO: OPTIONAL figure out weather conditions
-- TODO: fix default campaign Name
-- TODO: adjust campaign settings
-- TODO: adjust welcome and end screen
-- TODO: add Description and screenshots

--- ideas

--- ====================================================================================================
--- Global Functions
--- ====================================================================================================

--- Get current Campaign object, whether it is starting or started
--- @return CampaignPreset
function GetCampaign()
    if Game and Game.Campaign then
        return CampaignPresets[Game.Campaign]
    end

    if NewGameObj and NewGameObj.campaignId then
        return CampaignPresets[NewGameObj.campaignId]
    end

    return nil
end

--- Collect checks to ensure Final Stand Campaign is identified
function IsFinalStand()
    local isFinalStandChecks = {}
    Msg('isFinalStand', isFinalStandChecks)

    for key, value in pairs(isFinalStandChecks) do
        if value == true then
            return true
        end
    end

    return false
end

--- Add check to identify basic Final Stand campaign
--- @param isFinalStandChecks table
function OnMsg.isFinalStand(isFinalStandChecks)
    local campaign = GetCampaign()
    if campaign and campaign.IsFinalStand then
        isFinalStandChecks[campaign.id] = true
    end
end

--- @param object table
--- @param relationName string
--- @param relationKey string
--- @param globalPresetCollection (table|nil)
function GetRelationCollection(object, relationName, relationKey, globalPresetCollection)
    local collection = {}

    for _, relation in pairs(object[relationName]) do
        local presetId = relation[relationKey]

        if globalPresetCollection then
            table.insert(collection, _G[globalPresetCollection][presetId])
        else
            table.insert(collection, presetId)
        end
    end

    return collection
end

--- @param presets table
--- @return table
function GetFirstFromCollection(collection)
    for _, item in pairs(collection) do
        return item
    end

    return false
end

function GetFinalStandConfig()
    --TODO resolve value?
    if Game and Game.FinalStand and Game.FinalStand.config then
        return FinalStandConfigs[Game.FinalStand.config]
    end

    for name, config in pairs(FinalStandConfigs) do
        return config
    end

    return FinalStandConfigDef
end

--- Get FinalStandConfig value, some values need to be taken from Game.FinalStand object
--- @param value string
function GetFinalStandConfigValue(value)
    if value == 'enemyFaction' and Game.FinalStand then
        return Game.FinalStand.enemyFaction
    end

    if value == 'faction' and Game.FinalStand then
        return Game.FinalStand.faction
    end

    return GetFinalStandConfig()[value]
end

--- @param keyOnly boolean
function GetFinalStandFriendlyFaction(keyOnly)
    local faction = GetFinalStandConfigValue('faction')

    if keyOnly then
        return faction
    else
        return FinalStandFriendlyFactions[faction]
    end
end

--- @param value string
--- @param faction (FinalStandFriendlyFactionDef|string)
function GetFinalStandFriendlyFactionValue(value, faction)
    if not faction then
        faction = GetFinalStandEnemyFaction(true)
    end

    if not IsKindOf(faction, FinalStandFriendlyFactionDef) then
        faction = FinalStandFriendlyFactions[faction]
    end

    return faction[value]
end

--- @param keyOnly boolean
--- @return FinalStandEnemyFactionDef
function GetFinalStandEnemyFaction(keyOnly)
    local faction = GetFinalStandConfigValue('enemyFaction')

    if keyOnly then
        return faction
    else
        return FinalStandEnemyFactions[faction]
    end
end

--- @param value string
--- @param faction (FinalStandEnemyFactionDef|string)
function GetFinalStandEnemyFactionValue(value, faction)
    if not faction then
        faction = GetFinalStandEnemyFaction(true)
    end

    if not IsKindOf(faction, FinalStandEnemyFactionDef) then
        faction = FinalStandEnemyFactions[faction]
    end

    return faction[value]
end

--- ====================================================================================================
--- Global Message Listeners
--- ====================================================================================================
function OnMsg.UnableToUnlockAchievementReasons(reasons, achievement)
    if IsFinalStand() then
        reasons["final stand campaign"] = true
    end
end
